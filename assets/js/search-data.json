{
  
    
        "post0": {
            "title": "Starship Classifier Voila",
            "content": "from fastai.vision.all import * from fastai.vision.widgets import * . The Amazing Starship Classifier! . You need to know whether you&#39;re being chased by a Starfighter, Gunship or Freighter and you need an answer fast? Then you&#39;ve come to the right place. Take a pic of the Starship chasing you and click &#39;upload&#39; to classify it. (Important: This only handles Starfighters, Gunships and Freighters. It will not give a sensible answer for other types of spaceships or sailboats. . . path = Path() learn_inf = load_learner(path/&#39;export.pkl&#39;, cpu=True) btn_upload = widgets.FileUpload() out_pl = widgets.Output() lbl_pred = widgets.Label() . def on_data_change(change): lbl_pred.value = &#39;&#39; img = PILImage.create(btn_upload.data[-1]) out_pl.clear_output() with out_pl: display(img.to_thumb(128,128)) pred,pred_idx,probs = learn_inf.predict(img) lbl_pred.value = f&#39;Prediction: {pred}; Probability: {probs[pred_idx]:.04f}&#39; . btn_upload.observe(on_data_change, names=[&#39;data&#39;]) . display(VBox([widgets.Label(&#39;Select your Starship!&#39;), btn_upload, out_pl, lbl_pred])) .",
            "url": "https://susjus.github.io/susjus_fastpages_blog/fastpages/jupyter/fastai/voila/2021/08/01/fb_starship_classifier_voila.html",
            "relUrl": "/fastpages/jupyter/fastai/voila/2021/08/01/fb_starship_classifier_voila.html",
            "date": " • Aug 1, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Building a Starship classifier",
            "content": "import warnings warnings.filterwarnings(&#39;ignore&#39;) . import fastbook fastbook.setup_book() . from fastbook import * from fastai.vision.widgets import * . %load_ext dotenv %dotenv . In the original notebook it suggested to add my personal API AZURE_SEARCH_KEY as free text into the notebook. I didn&#39;t want to do that so created a .env file in root and added it to that (also added .env to .gitignore). Cell above loads the contents of the .env file now available to query from os.getenv() . import os key = os.getenv(&quot;AZURE_SEARCH_KEY&quot;) . starship_types = &#39;Freighter&#39;,&#39;Gunship&#39;,&#39;Starfighter&#39; path = Path(&#39;Starship&#39;) . if not path.exists(): path.mkdir() for o in starship_types: dest = (path/o) dest.mkdir(exist_ok=True) results = search_images_bing(key, f&#39;{o} Starship&#39;) download_images(dest, urls=results.attrgot(&#39;contentUrl&#39;)) . fns = get_image_files(path) fns . (#398) [Path(&#39;Starship/Gunship/00000106.jpg&#39;),Path(&#39;Starship/Gunship/00000142.jpg&#39;),Path(&#39;Starship/Gunship/00000048.jpeg&#39;),Path(&#39;Starship/Gunship/00000113.jpg&#39;),Path(&#39;Starship/Gunship/00000020.jpg&#39;),Path(&#39;Starship/Gunship/00000065.jpg&#39;),Path(&#39;Starship/Gunship/00000017.png&#39;),Path(&#39;Starship/Gunship/00000079.jpg&#39;),Path(&#39;Starship/Gunship/00000027.jpg&#39;),Path(&#39;Starship/Gunship/00000133.jpg&#39;)...] . failed = verify_images(fns) failed . (#0) [] . failed.map(Path.unlink); . From Data to DataLoaders . starships = DataBlock( blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, splitter=RandomSplitter(valid_pct=0.2, seed=42), get_y=parent_label, item_tfms=Resize(128)) . dls = starships.dataloaders(path) . dls.valid.show_batch(max_n=12, nrows=2) . starships = starships.new(item_tfms=Resize(128, ResizeMethod.Squish)) dls = starships.dataloaders(path) dls.valid.show_batch(max_n=12, nrows=2) . starships = starships.new(item_tfms=Resize(128, ResizeMethod.Pad, pad_mode=&#39;zeros&#39;)) dls = starships.dataloaders(path) dls.valid.show_batch(max_n=12, nrows=2) . starships = starships.new(item_tfms=RandomResizedCrop(128, min_scale=0.3)) dls = starships.dataloaders(path) dls.train.show_batch(max_n=6, nrows=1, unique=True) . starships = starships.new(item_tfms=Resize(128), batch_tfms=aug_transforms(mult=2)) dls = starships.dataloaders(path) dls.train.show_batch(max_n=12, nrows=2, unique=True) . Training Your Model, and Using It to Clean Your Data . starships = starships.new( item_tfms=RandomResizedCrop(224, min_scale=0.5), batch_tfms=aug_transforms()) dls = starships.dataloaders(path) . learn = cnn_learner(dls, resnet18, metrics=error_rate) learn.fine_tune(10) . [W NNPACK.cpp:79] Could not initialize NNPACK! Reason: Unsupported hardware. . epoch train_loss valid_loss error_rate time . 0 | 2.131983 | 2.320894 | 0.607595 | 00:07 | . epoch train_loss valid_loss error_rate time . 0 | 1.533878 | 1.177129 | 0.531646 | 00:06 | . 1 | 1.344892 | 0.849702 | 0.417722 | 00:07 | . 2 | 1.181586 | 0.822576 | 0.367089 | 00:06 | . 3 | 1.047706 | 0.765150 | 0.303797 | 00:06 | . 4 | 0.933157 | 0.688903 | 0.240506 | 00:07 | . 5 | 0.847383 | 0.617157 | 0.227848 | 00:07 | . 6 | 0.776044 | 0.551378 | 0.189873 | 00:06 | . 7 | 0.709568 | 0.534150 | 0.164557 | 00:07 | . 8 | 0.656107 | 0.539885 | 0.177215 | 00:06 | . 9 | 0.608007 | 0.537215 | 0.164557 | 00:06 | . interp = ClassificationInterpretation.from_learner(learn) interp.plot_confusion_matrix() . interp.plot_top_losses(5, nrows=5) . cleaner = ImageClassifierCleaner(learn) cleaner . for idx in cleaner.delete(): cleaner.fns[idx].unlink() for idx,cat in cleaner.change(): shutil.move(str(cleaner.fns[idx]), path/cat) . Using the Model for Inference . learn.export() . path = Path() path.ls(file_exts=&#39;.pkl&#39;) . (#1) [Path(&#39;export.pkl&#39;)] . learn_inf = load_learner(path/&#39;export.pkl&#39;) . learn_inf.dls.vocab . [&#39;Freighter&#39;, &#39;Gunship&#39;, &#39;Starfighter&#39;] . mfimage = &#39;images/mf.jpg&#39; download_url(&#39;https://upload.wikimedia.org/wikipedia/en/8/8d/A_screenshot_from_Star_Wars_Episode_IV_A_New_Hope_depicting_the_Millennium_Falcon.jpg&#39;, mfimage) learn_inf.predict(mfimage) . (&#39;Freighter&#39;, tensor(0), tensor([0.9551, 0.0321, 0.0129])) . xwimage = &#39;images/xw.jpg&#39; download_url(&#39;https://image.invaluable.com/housePhotos/profilesinhistory/87/589387/H3257-L96343217.jpg&#39;, xwimage) learn_inf.predict(xwimage) . (&#39;Starfighter&#39;, tensor(2), tensor([1.3478e-06, 1.6087e-05, 9.9998e-01])) .",
            "url": "https://susjus.github.io/susjus_fastpages_blog/fastpages/jupyter/fastai/2021/07/04/fb_02_production.html",
            "relUrl": "/fastpages/jupyter/fastai/2021/07/04/fb_02_production.html",
            "date": " • Jul 4, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://susjus.github.io/susjus_fastpages_blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "An analytics leader with over a decade of experience in the energy sector. Passionate about using data and fact based insights to influence strategic decision making and improve business outcomes. Strong advocate of continuous learning and development. This is my personal learning journey with fast.ai! My opinions are my own. . This website is powered by fastpages a blogging platform that natively supports Jupyter notebooks in addition to other formats. .",
          "url": "https://susjus.github.io/susjus_fastpages_blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://susjus.github.io/susjus_fastpages_blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}